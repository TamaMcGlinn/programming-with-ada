Language Summary of Key Points
==============================================================================

This tries to provide a reference for equivalent structures between Ada and
C++.  I'm filling in the chart a little at a time, `N_A` means that the
language has no equivalent.

Types used in Examples
------------------------------------------------------------------------------

+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
|Concept                   |    Ada                                                     |   C++                                                            |      Rust                                         |   Notes                                                      |
+==========================+============================================================+==================================================================+===================================================+==============================================================+
|   Reference              |   Access                                                   |  Reference                                                       |   Reference                                       |  Ada: Access only points to members in storage pool.         |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
|   Pointer                |   Access All                                               |  Pointer                                                         |   Pointer                                         |  Ada: Access all may point to a storage or                   |
|                          |                                                            |                                                                  |                                                   |  non-storage pool address.                                   |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
|   Pointer                |   Access All                                               |  Pointer                                                         |   Pointer                                         |  Ada: Access all may point to a storage or                   |
|                          |                                                            |                                                                  |                                                   |  non-storage pool address.                                   |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
|  Namespace               |   P, Q, R                                                  |  P, Q, R                                                         |   P, Q, R                                         |  Ada: Packages also act as elements of compilation           |
|                          |                                                            |                                                                  |                                                   |  units.                                                      |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
|  Class                   |  Capricorn                                                 | Capricorn                                                        | Capricorn                                         |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| Struct                   | Scorpio                                                    | Scorpio                                                          | Scorpio                                           |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| Type                     | S, T, V, W                                                 | S, T, V, W                                                       | S, T, V, W                                        | V and W, not U and V to be easier to read.                   |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| Variables                | A, B, C                                                    | a, b, c                                                          | a, b, c                                           |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| Function                 | Foo, Bar                                                   | foo, bar                                                         | foo, bar                                          |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+

+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| Concept                  | Ada                                                        | C++                                                              | Rust                                              | Notes                                                        |
+==========================+============================================================+==================================================================+===================================================+==============================================================+
| **Overview**                                                                                                                                                                                                                                                                |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| Identifiers              | Can't start with number or                                 | ``[a-zA-Z0-9_][a-zA-Z0-9_]*``                                    |                                                   |                                                              |
|                          | underscore, **case insensitive**                           |                                                                  |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| Keywords                 |Case insensitive, usually lower case                        | lower case                                                       | lower case                                        |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| Concept                  | Ada                                                        | C++                                                              | Rust                                              | Notes                                                        |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
|Naming Conventions(s)     | ``Ada_Case``, ``keywords``                                 |``camelCase``, ``PascalCase`` (Unreal), ``snake_case`` (STL)      | ``snake_case`` (functions), ``PascalCase`` (types)|                                                              |
|                          |                                                            |                                                                  |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| Declaration file         | ``FileName.ads``                                           | ``FileName.h``                                                   | ``FileName.rs``                                   | Ada: ``.ads`` files are compiled, unlike headers.  Rust:     |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| Definition file          | ``FileName.adb``                                           | ``FileName.cpp``                                                 | ``FileName.rs``                                   |  No separate declaration/specification file is used. C++:    |
|                          |                                                            |                                                                  |                                                   | Other possible extensions exist (``.hpp``, ``.hh``, etc.)    |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| Dependency               | ``with Package.Child;``                                    | ``#include "FileName.h"``                                        | ``use my_mod;``                                   | C++: Uses preprocessor.                                      |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
|                          |                                                            | ``#include <FileName.h>``                                        |                                                   | C++: Usage of <> vs "" is implementation-defined.            |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| Line comment             | ``-- line comment``                                        | ``// line comment``                                              | ``// line comment``                               |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| Block comment            |  `N/A`                                                     | ``/*  */``                                                       | ``/* /* nestable */ */``                          |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| Inline docs              | ``--`` before or after element                             | `/** */` or `///` (doxygen)                                      | ``/** */``, `//!`                                 |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| **Program Structure**                                                                                                                                                                                                                                                       |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| Compile-time config      | `N/A`                                                      | ``#if``                                                          | ``#[cfg(...)]``                                   |                                                              |
|                          |                                                            | ``#ifndef``                                                      |                                                   |                                                              |
|                          |                                                            | ``#ifdef``                                                       |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| Static assert            | `N/A`                                                      | `static_assert(expr, "message");`                                |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
|                          | `N/A`                                                      | `constexpr`                                                      |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| Namespacing              | ``package P`                                               | ``namespace P { }``                                              | ``mod P { }``                                     |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| Child Namespaces         | ``package P.R``                                            | ``namespace P { namespace R {}}``                                |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| Namespacing              | ``package P`                                               | ``namespace P { }``                                              | ``mod P { }``                                     |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| Namespacing              |                                                            | ``namespace P::Q { }``                                           |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| Namespace aliasing       | ``package TIO renames Ada.Text_IO;``                       | ``namespace fs = std::filesystem;``                              |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| Using namespace          |                                                            | ``use Ada.Text_IO;``                                             | ``using namespace std;``                          |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| Scope resolution         | ``P.Q.R``                                                  | ``P::Q::R``                                                      | ``P::Q::R``                                       |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
|                          | ``private with Q;``                                        |                                                                  |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+

|Ensuring stateless behavior|`package P with Pure`||Ada: Ensures that the package and everything it uses has no state.|
|No module initialization required|`pragma Preelaborate(P);`|||Ada: Ensures the package has no initialization routine.|
|Ensure elaboration immediately after specification|`pragma Elaborate_Body;`|||Prevents usage of components in a package before they are initialized.|
|Ensure other package is initialized before this one|`pragma Elaborate(P);`|||
|Ensure other package and all dependencies are initialized before this one|`pragma Elaborate_All(P);`|||
||`pragma Restrictions(No_Dependencies => Other_Package)`|||

+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| **Accessing Memory**                                                                                                                                                                                                                                                        |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| Pointer to storage pool  | ``Ptr : access T;``                                        | `N/A`                                                            |                                                   | Ada: Accesses elements within storage pools, may not         |
|                          |                                                            |                                                                  |                                                   | point to arbitrary locations                                 |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| Pointer to storage pool  | ``Ptr : access T;``                                        | `N/A`                                                            |                                                   | Ada: Accesses elements within storage pool, may not point to |
|                          |                                                            |                                                                  |                                                   | arbitrary locations.                                         |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| Pointer                  | ``Ptr : access all T;``                                    | ``T* ptr;``                                                      |                                                   | Ada: May access storage pool or any `aliased` variable.      |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| Pointer deference        | ``Ptr.all``                                                | ``*ptr``                                                         |                                                   | Ada: Runtime null check might be done.                       |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| Reference                | ``Ptr : not null access T;``                               | ``T& ptr;``                                                      |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| Variable used by Pointer | ``A: aliased T;``                                          | `N/A`                                                            |                                                   | Ada: Required to get an "access" to this value.              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| Address                  | ``Ptr : access T := T'Access(A)``                          | ``T* ptr = &A;``                                                 |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| Address                  | ``Ptr : access all T := T'Unchecked_Access(A)``            | `N/A`                                                            |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| Constant pointer         | ``Ptr : constant access T;``                               | ``T* const ptr;``                                                |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| Pointer to constant      | ``Ptr : access constant T;``                               | ``const T* ptr;``                                                |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| Constant pointer to      | ``Ptr : const access constant T``                          | ``const T* const ptr;``                                          |                                                   |                                                              |
| constant                 |                                                            |                                                                  |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
|                          |``pragma Restrictions(No_Implicit_Heap_Allocation)``        |                                                                  | Ada: Prevents even implicit heap allocations made |                                                              |
|                          |                                                            |                                                                  | by the compiler.                                  |                                                              |
|                          |``pragma Restrictions(No_Anonymous_Allocators)``            |                                                                  |                                                   |                                                              |
|                          |                                                            |                                                                  |                                                   |                                                              |
|                          |                                                            |                                                                  |                                                   |                                                              |
|                          |                                                            |                                                                  |                                                   |                                                              |
|                          |                                                            |                                                                  |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| **Control Flow**                                                                                                                                                                                                                                                            |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
|                          | .. code-block:: Ada                                        | .. code-block:: C++                                              | .. code-block:: Rust                              |                                                              |
| if                       |                                                            |                                                                  |                                                   |                                                              |
|                          |    if A then                                               |    if (A) {                                                      |     if A {                                        | Ada: Must be `null;` statement if empty.  C++: Braces        |
|                          |        statements;                                         |        statements;                                               |         statements;                               | optional.                                                    |
|                          |    elsif B then                                            |    }                                                             |     }                                             |                                                              |
|                          |        statements;                                         |    else if (B) {                                                 |     else if B {                                   |                                                              |
|                          |    else                                                    |        statements;                                               |         statements;                               |                                                              |
|                          |        statements                                          |    }                                                             |     }                                             |                                                              |
|                          |    end if;                                                 |    else {                                                        |     else {                                        |                                                              |
|                          |                                                            |        statements;                                               |          statements;                              |                                                              |
|                          |                                                            |    }                                                             |     }                                             |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
|                          |                                                            | .. code-block: C++                                               |                                                   |                                                              |
|                          |                                                            |                                                                  |                                                   |                                                              |
|                          |                                                            |    if (auto variable = expr; A) {                                |                                                   |                                                              |
|                          |                                                            |                                                                  |                                                   |                                                              |
|                          |                                                            |    }                                                             |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
|                          | .. code-block:: Ada                                        | .. code-block:: C++                                              |                                                   |                                                              |
|                          |                                                            |                                                                  |                                                   |                                                              |
| while                    |    while A loop                                            |    while (A) {                                                   |                                                   |                                                              |
|                          |        statements;                                         |        statements;                                               |                                                   |                                                              |
|                          |    end loop;                                               |    }                                                             |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
|                          |                                                            | .. code-block:: C++                                              |                                                   |                                                              |
|                          |                                                            |                                                                  |                                                   |                                                              |
| do-while                 |                                                            |    do {                                                          |                                                   |                                                              |
|                          |                                                            |        statements;                                               |                                                   |                                                              |
|                          |                                                            |    } while(A);                                                   |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
|                          | .. code-block:: Ada                                        | .. code-block:: C++                                              |                                                   |                                                              |
|                          |                                                            |                                                                  |                                                   |                                                              |
| value-based loop         |    for Value in 0 .. 99 loop                               |    for (int i = 0; i < 99; ++i) {                                |                                                   |                                                              |
|                          |        statements;                                         |        statements;                                               |                                                   |                                                              |
|                          |    end loop;                                               |    }                                                             |                                                   |                                                              |
|                          |                                                            |                                                                  |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
|                          | .. code-block:: Ada                                        | .. code-block:: C++                                              |                                                   |                                                              |
|                          |                                                            |                                                                  |                                                   |                                                              |
| iterator-based loop      |    for Elem of Container loop                              |    for (const auto& elem : container) {                          |                                                   |                                                              |
|                          |        statements;                                         |        statements;                                               |                                                   |                                                              |
|                          |    end loop;                                               |    }                                                             |                                                   |                                                              |
|                          |                                                            |                                                                  |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
|                          | .. code-block:: Ada                                        |                                                                  |                                                   |                                                              |
|                          |                                                            |                                                                  |                                                   |                                                              |
| Iterate over enum        |    for Elem in EnumName loop                               |                                                                  |                                                   |                                                              |
|                          |        statements;                                         |                                                                  |                                                   |                                                              |
|                          |    end loop;                                               |                                                                  |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| start next iteration     | `N/A`                                                      | ``continue``                                                     |                                                   |                                                              |
|                          |                                                            |                                                                  |                                                   |                                                              |
|                          |                                                            |                                                                  |                                                   |                                                              |
|                          |                                                            |                                                                  |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| Stop iterating           | ``exit``                                                   | ``break``                                                        |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
|                          |                                                            |                                                                  |                                                   |                                                              |
|                          |                                                            |                                                                  |                                                   |                                                              |
|                          |                                                            |                                                                  |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| **Control Flow**                                                                                                                                                                                                                                                            |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
|                          | .. code-block:: Ada                                        | .. code-block:: C++                                              | `N/A`                                             | Ada: Can put ``exception`` as ending section of any block of |
|                          |                                                            |                                                                  |                                                   | executable statements, such as in ``package body`` or        |
| Start exception handling |    declare                                                 |    try {                                                         |                                                   |  ``declare`` or the end of a subprogram.                     |
|                          |        statements;                                         |        statements;                                               |                                                   |                                                              |
|                          |    exception                                               |    }                                                             |                                                   |                                                              |
|                          |        when A =>                                           |    catch (A) {                                                   |                                                   |                                                              |
|                          |             statements;                                    |        statements;                                               |                                                   |                                                              |
|                          |        when others =>                                      |    }                                                             |                                                   |                                                              |
|                          |             statements;                                    |    catch(...) {                                                  |                                                   |                                                              |
|                          |    end;                                                    |        statements;                                               |                                                   |                                                              |
|                          |                                                            |    }                                                             |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| **Expressions**                                                                                                                                                                                                                                                             |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
|                          | .. code-block:: Ada                                        |                                                                  |                                                   |                                                              |
| qualified expression     |                                                            |                                                                  |                                                   |                                                              |
|                          |    for all A of B => expr                                  |                                                                  |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
|                          | .. code-block:: Ada                                        |                                                                  |                                                   |                                                              |
|                          |                                                            |                                                                  |                                                   |                                                              |
|                          |    for some A of B => expr                                 |                                                                  |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
|                          | .. code-block:: Ada                                        | `N/A`                                                            |                                                   |                                                              |
|                          |                                                            |                                                                  |                                                   |                                                              |
| if expression            |    A : Boolean := (if A then B else C)                     |                                                                  |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| **Mathematics**                                                                                                                                                                                                                                                             |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
|                          |                                                            | .. code-block:: C++                                              |                                                   |                                                              |
| In-place                 |                                                            |                                                                  |                                                   |                                                              |
|                          |                                                            |    A += 1;                                                       |                                                   |                                                              |
|                          |                                                            |                                                                  |                                                   |                                                              |
|                          |                                                            |                                                                  |                                                   |                                                              |
|                          |                                                            |                                                                  |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
|                          |                                                            | .. code-block:: C++                                              |                                                   |                                                              |
| Pre-increment            |                                                            |                                                                  |                                                   |                                                              |
|                          |                                                            |                                                                  |                                                   |                                                              |
|                          |                                                            |                                                                  |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| Post-increment           |                                                            | .. code-block:: C++                                              |                                                   |                                                              |
|                          |                                                            |                                                                  |                                                   |                                                              |
|                          |                                                            |                                                                  |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| Modulus                  |  ``mod``                                                   |  ``%``                                                           |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| Remainder                | ``rem``                                                    | ``std::div``                                                     |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
|                          | .. code-block:: Ada                                        | `N/A`                                                            |                                                   |                                                              |
| Exponentiation           |                                                            |                                                                  |                                                   |                                                              |
|                          |    A ** B                                                  |                                                                  |                                                   |                                                              |
|                          |                                                            |                                                                  |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| Bit shifting             | In standard library                                        | .. code-block:: C++                                              |                                                   |                                                              |
|                          |                                                            |                                                                  |                                                   |                                                              |
|                          |                                                            |    A <<= B;                                                      |                                                   |                                                              |
|                          |                                                            |    A >>= B;                                                      |                                                   |                                                              |
|                          |                                                            |    A = A << B;                                                   |                                                   |                                                              |
|                          |                                                            |    A = A >> B;                                                   |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
|                          |                                                            |                                                                  |                                                   |                                                              |
|                          |                                                            |                                                                  |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| **Boolean**                                                                                                                                                                                                                                                                 |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
|                          | .. code-block:: Ada                                        | .. code-block:: C++                                              |                                                   |                                                              |
| Equality                 |                                                            |                                                                  |                                                   |                                                              |
|                          |    A = B                                                   |    A == B                                                        |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
|                          | .. code-block:: Ada                                        | .. code-block:: C++                                              |                                                   | Ada:Inequality (`/=`) is automatically defined to be the     |
| In-Equality              |                                                            |                                                                  |                                                   | opposite of equality if `=` is overriden to return a         |
|                          |   A /= B                                                   |    A != B                                                        |                                                   |  ``Boolean``.                                                |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
|                          |                                                            |                                                                  |                                                   |                                                              |
| Not                      | ``not``                                                    | ``!``                                                            |                                                   |                                                              |
|                          |                                                            |                                                                  |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
|                          | .. code-block:: Ada                                        | .. code-block:: C++                                              |                                                   |                                                              |
| Boolean operators        |                                                            |                                                                  |                                                   | C++: Used rarely for optimizations to reduce branching since |
|                          |    A or B                                                  |   A | B                                                          |                                                   |  they make assumptions as to how boolean values are stored.  |
|                          |    A and B                                                 |   A & B                                                          |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
|                          | .. code-block:: Ada                                        | .. code-block:: C++                                              |                                                   |                                                              |
| Short circuiting         |                                                            |                                                                  |                                                   |                                                              |
| boolean operators        |    A or else B                                             |   A || B                                                         |                                                   |                                                              |
|                          |    A and then B                                            |   A && B                                                         |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
|                          |                                                            |                                                                  |                                                   |                                                              |
| Exclusive-Or (XOR)       | ``xor``                                                    | ``xor``                                                          |                                                   |                                                              |
|                          |                                                            |                                                                  |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
|                          | .. code-block: Ada                                         |                                                                  |                                                   |                                                              |
|                          |                                                            |                                                                  |                                                   |                                                              |
| Implies                  |    (if A then B)                                           |                                                                  |                                                   |                                                              |
| (not A or B)             |                                                            |                                                                  |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
| **Functions and Procedures**                                                                                                                                                                                                                                                |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
|                          | .. code-block:: Ada                                        | .. code-block:: C++                                              |                                                   |                                                              |
| Procedure                |                                                            |                                                                  |                                                   |                                                              |
|                          |    procedure Foo(X: in T; Y: in V) is                      |    void Foo(T X, V Y) {                                          |                                                   |                                                              |
|                          |    begin                                                   |                                                                  |                                                   |                                                              |
|                          |        statements;                                         |    }                                                             |                                                   |                                                              |
|                          |    end Foo;                                                |                                                                  |                                                   |                                                              |
|                          |                                                            |                                                                  |                                                   |                                                              |
|                          |                                                            |                                                                  |                                                   |                                                              |
|                          |                                                            |                                                                  |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
|                          | .. code-block:: Ada                                        | .. code-block:: C++                                              |                                                   |                                                              |
| Function                 |                                                            |                                                                  |                                                   |                                                              |
|                          |    function Fibonacci(X: Natural) return Natural is        |    int fibonacci(int i) {                                        |                                                   |                                                              |
|                          |        if X = 0 or X = 1 then                              |        if (x == 0 || x == 1) {                                   |                                                   |                                                              |
|                          |            return X;                                       |            return x;                                             |                                                   |                                                              |
|                          |        else                                                |        }                                                         |                                                   |                                                              |
|                          |            return Fibonacci(X - 1) + Fibonacci(X - 2)      |        else {                                                    |                                                   |                                                              |
|                          |        end if;                                             |            return fibonacci(x-1) + fibonacci(x-2);               |                                                   |                                                              |
|                          |    end Fibonacci;                                          |        }                                                         |                                                   |                                                              |
|                          |                                                            |    }                                                             |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
|                          |                                                            |                                                                  |                                                   |                                                              |
|                          |                                                            |                                                                  |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+
|                          | .. code-block:: Ada                                        | .. code-block:: C++                                              |                                                   |                                                              |
|                          |                                                            |                                                                  |                                                   |                                                              |
|                          |                                                            |                                                                  |                                                   |                                                              |
|                          |                                                            |                                                                  |                                                   |                                                              |
|                          |                                                            |                                                                  |                                                   |                                                              |
+--------------------------+------------------------------------------------------------+------------------------------------------------------------------+---------------------------------------------------+--------------------------------------------------------------+


|Inline|`procedure Foo with Inline;`|`void Foo();`|`#[inline]`|
|Pass by pointer|`procedure Foo(in B: access Bar);`|`void foo(Bar* b);`||
|Pass by reference|`procedure Foo(in B: Bar); -- w/ limited type`|`void foo(Bar& b);`||Ada: limited types and tagged types are always passed by reference.|
|Similar to Haskell's `where`|`L2 : Integer renames V.Length * V.Length`||Renames a subexpression.|
|Using functions for a type as unqualified|`use type My_Package.Foo;`| `N/A`||Ada: Allows functions which use or return a type to be used without the package prefix.|
|const-correctness|`procedure Foo(in Bar);`|`void Foo(const Bar& bar);`|`fn foo(bar : &Bar)`|Ada: Treats parameters without `out` as constant.|
|Modifyable parameters|`procedure Foo(in out Bar);`|`void Foo(Bar& bar);`|`fn foo(bar : &mut Bar)`|
|Expression Function|`function Foo is (Some_Expression);`||Ada way to quickly write functions|
||||||
||||||
|**Types**||||
||||||
||||||
|Assignment|`A := B;`|`A = B;`|`a = b;`||Ada: Assignment is not an operator and cannot be overridden.|
|Multi-dimensional Array|`Mat4 : array (1 .. 4, 1 .. 4) of Float;`|`float Mat4[4][4];`|||
|Statically sized array|`type Buffer is array(1 .. 128) of Integer;`|`int Buffer[128];`||Ada: Convention seems to be indexes starting from 1, though arrays can be arbitrarily indexed.|
|Built-In Variable length array|`type Buffer is array(1 .. N) of Integer`| `N/A`||Ada variable-length arrays can avoid heap allocation and have their bounds determined at runtime, even when stored within types.  This behavior is still checked for size constraints.|
|Semantic type|`type Microseconds is new Integer;`| `N/A`|||
|Range checks|`type My_Positive is range 1 .. Integer;`| `N/A` |||
|Type Aliasing|`subtype T is W;`|`using T = W;`|||
|||`typedef W T;`|||
|Sum Types|`type S is (T, V, W);`|`std::variant<T, V, W>`|`enum S { T, V, W }`||
|Inferred typing| `N/A` | `auto x = /*expr*/`|||
|Coersion (casting)|`A := B'(C);`|`B a = static_cast<B>(c);`||
|Enum range|`A'Range`|`N/A`||Ada: Treated like a range, similar to `1 .. 3`, e.g. can be used like `for A in A'Range`|
|Size of a type|`A'Size`|`sizeof(A)`||
|Alignment|`A'Alignment`|`alignof(A)`||
|Membership test|`A in E`|||Ada: Works to see if types meet subtype contraints, also use to determine instance-of relationship.|
||||||
||||||
|**Object-Oriented Programming**||||
||||||
||||||
|Subprogram call (no parameters)|`A;`|`a();`|`a();`||
|Subprogram call of type|`A.B;`| `A.B();`|`a.b();`||
|Subprogram call of pointed to type|| `A->B();`|||
|Preventing copying|`type X is limited type;`|`class Foo { Foo(Foo&) = delete; Foo& operator=(const Foo&) = delete; };`|||
|Class-like|`type T is private;`|`class T {};`|`struct T {}`||
|Override specifier|`overriding`|`override`||
||`not overriding`|`N/A`||Ensure that a subprogram definition does not override an existing one.|
|Inheritance|`type Foo is Bar with null record`|`class Foo : public Bar {};`|
||`type Foo is Bar with record ... end record`|`class Foo : public Bar { ... };`|
|Passing parameter by base class|`BaseClass'Class`|`BaseClass&`|
|Empty statement|`null;`|`;`||
|||`do { } while (0)`;||
|Empty Procedure|`procedure Foo is null;`|`void Foo(){}`||
|||`explicit`||
|Dynamic allocation|`A : access T := new T;`|`T* a = new T()`|Most newer C++ code prefers the usage of `std::shared_ptr` or `std::unique_ptr`.|
|||`std::unique_ptr<T> a = std::make_unique<T>();`||
|||`std::shared_ptr<T> a = std::make_shared<T>();`||
|Dynamic dispatching|`procedure Foo(A : T'Class)`|`virtual void Foo();`||
|Type Parameterized by Value|`N/A`|`template <int T = 5>`||C++ is done at compile-time.|
|Type Parameterized by Value|`type S(T: t) is record -- ...`|`N/A`||Ada: Uses "discriminants" and is at runtime|
|Type Invariant|`type T is new V with Type_Invariant => Expr(T)`||||
|Runtime type checking|`A in T`|||
||`limited with P;`|||
||`private package My_Package`|||
||||||
||||||
|**String Handling**||||
||||||
||||||
|String concatenation|`A & B`|`std::string C = A + B;`|||



Terminology
==============================================================================

|Term|Ada|C++||
|----|----|----|----|
||tagged type|class||
||record|struct||
||parent||Non-abstract tagged type being extended.|
||pregenitor||Additional interfaces inherited|
|Heap|Storage pool|Heap|Ada: Storage pool isn't exactly the same as "heap" but is similar.|


Ada Verbiage
==============================================================================

- Limited Type - an uncopyable type
- ABE - "Access-before-elaboration"


